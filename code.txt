import tkinter as tk
from tkinter import ttk, messagebox
import cv2
import face_recognition
import os
import numpy as np
from datetime import datetime

path = 'student_images'
images = []
classNames = []
encoded_face_train = []

def load_images():
    global images, classNames, encoded_face_train
    images = []
classNames = []
mylist = os.listdir(path)

    for cl in mylist:
curImg = cv2.imread(f'{path}/{cl}')
images.append(curImg)
classNames.append(os.path.splitext(cl)[0])

encoded_face_train = find_encodings(images)

def find_encodings(images):
encodeList = []
    for img in images:
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
encoded_face = face_recognition.face_encodings(img)[0]
encodeList.append(encoded_face)
    return encodeList

def mark_attendance(name):
attendance_file = 'Attendance.csv'
today_date = datetime.now().strftime('%d-%B-%Y')
    with open(attendance_file, 'r+') as f:
attendance_records = f.readlines()
attendance_names = [record.split(',')[0].strip() for record in attendance_records]

        if name not in attendance_names:
            now = datetime.now()
            time = now.strftime('%I:%M:%S %p')
f.write(f'{name}, Log In Time: {time}, Date: {today_date}\n')

def recognize_faces():
    cap = cv2.VideoCapture(0)
    while True:
        success, img = cap.read()
        if not success:
messagebox.showerror("Error", "Failed to capture image")
            break

imgS = cv2.resize(img, (0, 0), None, 0.25, 0.25)
imgS = cv2.cvtColor(imgS, cv2.COLOR_BGR2RGB)

faces_in_frame = face_recognition.face_locations(imgS)
encoded_faces = face_recognition.face_encodings(imgS, faces_in_frame)

        for encode_face, faceloc in zip(encoded_faces, faces_in_frame):
            matches = face_recognition.compare_faces(encoded_face_train, encode_face)
faceDist = face_recognition.face_distance(encoded_face_train, encode_face)
matchIndex = np.argmin(faceDist)

            if matches[matchIndex]:
                name = classNames[matchIndex].upper().lower()
                y1, x2, y2, x1 = faceloc
                y1, x2, y2, x1 = y1 * 4, x2 * 4, y2 * 4, x1 * 4

                cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
                cv2.rectangle(img, (x1, y2 - 35), (x2, y2), (0, 255, 0), cv2.FILLED)
                cv2.putText(img, name, (x1 + 6, y2 - 6), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255, 255), 2)
mark_attendance(name)
        cv2.imshow('Webcam', img)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
cap.release()
    cv2.destroyAllWindows()

def start_recognition():
load_images()
recognize_faces()

root = tk.Tk()
root.title("Face Recognition Attendance System")
root.geometry("800x600")
header_label = tk.Label(root, text="Face Recognition Attendance System", font=("Helvetica", 20))
header_label.pack(pady=20)
button_frame = tk.Frame(root)
button_frame.pack(pady=20)
start_button = ttk.Button(button_frame, text="Start Recognition", command=start_recognition)
start_button.pack(side=tk.LEFT, padx=10)

exit_button = ttk.Button(button_frame, text="Exit", command=root.quit)
exit_button.pack(side=tk.RIGHT, padx=10)

root.mainloop()
